# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch

#on:
# push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]

# This allows for a manual trigger. Good for when testing the deployment script
on:
  workflow_dispatch:

env:

  AZURE_WEBAPP_NAME: ddkbot-webapp-1    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  CODE_PACKAGE_PATH: './Code/Application'              # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.x'             # set this to the dot net version to use

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  build:    
    name: 'Build and test job'
    runs-on: ubuntu-latest
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # checkout the repo
    - name: 'Checkout GitHub Action' 
      uses: actions/checkout@master
    - run: cd $CODE_PACKAGE_PATH
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.DDK_BOT_AZURE_CREDENTIALS }}

# Runs a single command using the runners shell
    - name: 'Setup Dotnet ${{ env.DOTNET_VERSION }}'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_VERSION }}'

   # Run dotnet build and publish
    - name: 'dotnet build and publish'
      run: |
        dotnet restore
        dotnet build --configuration Release
        dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}' 
      
    #  Deploy to Azure Web apps
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}

    # Azure logout 
    - name: logout
      run: |
        az logout
